/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * 
 */

#include "mathematica++/history.h"

void mathematica::history::record(mathematica::packets::packet< mathematica::packet_RETURN >::ptr packet){
    _records.push_back(packet);
}

mathematica::packets::packet< mathematica::packet_RETURN >::ptr mathematica::history::last() const{
    return _records.back();
}

mathematica::history::string_list_type mathematica::history::messages() const{
    mathematica::history::string_list_type msgs;    
    mathematica::packets::Return::range_type range = last()->related(mathematica::packet_MESSAGE);
    for(auto i=range.first; i != range.second; ++i){
        mathematica::packet::ptr packet = i->second;
        mathematica::packets::Message::ptr message_packet = boost::dynamic_pointer_cast<mathematica::packets::Message>(packet);
        std::string message = message_packet->message();
        msgs.push_back(message);
    }
    return msgs;
}

std::string mathematica::history::prompt() const{
    mathematica::packets::Return::range_type range = last()->related(mathematica::packet_INPUTNAME);
    if(!std::distance(range.first, range.second)){
        return std::string();
    }
    mathematica::packet::ptr packet = range.first->second;
    mathematica::packets::InputName::ptr input_prompt_packet = boost::dynamic_pointer_cast<mathematica::packets::InputName>(packet);
    return input_prompt_packet->prompt();
}

mathematica::history::string_list_type mathematica::history::texts() const{
    mathematica::history::string_list_type texts;    
    mathematica::packets::Return::range_type range = last()->related(mathematica::packet_TEXT);
    for(auto i=range.first; i != range.second; ++i){
        mathematica::packet::ptr packet = i->second;
        mathematica::packets::Text::ptr text_packet = boost::dynamic_pointer_cast<mathematica::packets::Text>(packet);
        std::string message = text_packet->text();
        texts.push_back(message);
    }
    return texts;
}

mathematica::value mathematica::history::out(int n) const{
    packets::Return::ptr packet = _records[n];
    return packet->token();
}

mathematica::value mathematica::history::operator[](int n) const{
    return out(n);
}

mathematica::history::packets_type::size_type mathematica::history::count() const{
    return _records.size();
}

